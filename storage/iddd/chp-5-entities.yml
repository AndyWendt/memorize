---

- question: "When should you make an object an entity?"
  answer: "Any time that an object needs have a unique identity"
  tags: []

- question: "What should you focus on when first designing an entity?"
  answer: |
    The attributes and properties that uniquely define its behavior and identity.
    Strip away the behavior and the excess properties that are not essential to the concept.
  tags: []

- question: "Why use Entities instead of Value Objects to store unique identity?"
  answer: |
    So that the behavior associated with that identity can be centralized instead of spread out and leaking.
  tags: []

- question: "What are reasonable ways to get users to define unique and correct identities?"
  answer: |
    Use design discussions to devise workflows to safely define human-readable unique identities
  tags: []

- question: "What is an ideal example of an application generated identity?"
  answer: "UUID"
  tags: []

- question: |
    When identities are passed between Bounded Contexts, what is a good strategy to encapsulate
    the information?
  answer: |
    A Value Object since it allows for retrieval of the ID as well as meta information such as creation date.
  tags: []

- question: "What is a good object to use for generating Aggregate Root identities?"
  answer: "The Repository for the Aggregate root identity"
  tags: []

- question: "What is one way to reduce the performance burden of DB generated IDs?"
  answer: Use a Repository to cache sequence/increment values
  tags: []

- question: "Describe the types of database identity generation and assignment"
  answer: |
    * Early happens before Entity persistence
    * Late happens after Entity persistence
  tags: []

- question: "What Pattern would be useful to support both types of Identity generation?"
  answer: "Repository"
  tags: []

- question: "How is an Entities' ID selected when it resides in another Bounded Context?"
  answer: "A fuzzy search combined with user selection from that search"
  tags: []

- question: "How could updates be handled when another Bounded Context assigns identity?"
  answer: "Event-driven architecture with Domain Events"
  tags: []

- question: "How do you handle concept differences between autonomous Contexts?"
  answer: "Use Context maps to translate"
  tags: []

- question: "What are the potential issues of Late ID Generation?"
  answer: |
    * A Domain Event may be recieved before persistence
    * Repository collection additions may not work since there isn't a unique ID yet to add
  tags: []

- question: "How do you support the domain and or model needing separate IDs?"
  answer: "Use a surrogate ID.  Hide it using a Layer Supertype"
  tags: []

- question: "What is an acceptable form for a Ubiquitous language to take in its early stages?"
  answer: "Using a glossary with scenarios.  The language is ultimately modelled by the code."
  tags: []

- question: "What is one approach to segregate identities to protect data privacy?"
  answer: "Query striping where you require the root entities ID on all queries"
  tags: []

- question: "What kind of object would you put a password encrypter in?"
  answer: "A Domain Service (i.e. EncryptionService)"
  tags: []

- question: |
    Describe the pattern that requires code to be written in a manner that makes the terminology coincide
    with the action (methods)?
  answer: An Intention Revealing Interface requires the action (method) to coincide with the language.
  tags: []

- question: "What is a good strategy to protect sensitive information? An Example?"
  answer: |
    Interating with sensitive infomration only through a Domain Service and
    ensuring that the sensitive information does not leave the Aggregate boundary.
    Passwords is an example.
  tags: []

- question: "What is object Schizophrenia?"
  answer: |
    An object with multiple roles and responsibilities where the objects delegated to don't know
    the identity of their originating object.
  tags: []

- question: "When is delegation a good design choice?"
  answer: "Only when it simplifies more than it complicates (Gamma et al)"
  tags: []

- question: "How do you ensure clean responsibilities of an object?"
  answer: |
    Use role-based interfaces.  Design the interface to only expose what we want clients to use.
  tags: []

- question: "What is the minimum an Entity constructor must include?"
  answer: "Enough state to fully identify it and allow clients to find it."
  tags: []

- question: "What is an Entity Invariant?"
  answer: |
    A state that must stay transactionally consistent throughout the Entity life cycle.
    They are a concern of Aggregates.
  tags: []

- question: "What is one method to assert individual properties/attributes?"
  answer: |
    Self-encapsulation (Fowler) where individual properties/attributes conform to the contract of the object and
    are in interacted with through accessors, internally and externally.
    These are guards in the form of precondition validations.
  tags: []

- question: "What benefit does design by contract provide?"
  answer: "It enables you to specify preconditions, post conditions, and invariants of components"
  tags: []

- question: "What are good patterns to use to validate an Entity"
  answer: "Specification or Strategy patterns and or the Deferred Validation concept"
  tags: []

- question: "Why should you typically not embed validation logic inside of an Entity?"
  answer: |
    * The Validation logic often changes more often than the object itself
    * The Entity would assume too many responsibilities
  tags: []

- question: "What should a validator class do when it encounters an error?"
  answer: |
    Add the error to a collection and then continue to process the potential errors
    so that all may be found.
  tags: []

- question: "What is a good strategy to validate groups of Entities or Aggregates?"
  answer: |
    Use a Domain Service with the Deferred Validation pattern along
    with a repository to read the aggregate instances to validate.
  tags: []

- question: "What is the most useful way to track changes to an Entity?"
  answer: |
    Domain Events coupled with an Event Store.  Event Sourcing pattern is useful
    for the technical teams to track changes.
  tags: []


