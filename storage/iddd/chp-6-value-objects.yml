---

- question: "What are examples of Value Objects?"
  answer: |
    * Numbers
    * strings
    * dates
    * times
    * full names
    * currency
    * colors
    * phone numbers
    * postal addresses
  tags: []


- question: "Why should you strive to model using Value Objects instead of Entities?"
  answer: |
    * When modeled as an Entity, the design should be biased toward
      serving as a Value container rather than a child Entity container
    * Value types are easier to create, test, use, optimize, and maintain.
  tags: []

- question: What is the problem with using basic types when representing a value?
  answer: |
    You short change your model by not allowing Side-Effect Free Functions to be added by
    the basic type.
  tags: []

- question: Why are the problems with patching a basic type to create a value object?
  answer: |
    Patching a basic type doesn't allow you to gain deep domain insight.
  tags: []

- question: |
    When taking in an Entity for a Value Object, what is a proper way to
    modify the Entity while maintaining immutability?
  answer: |
    Have the Value Object answer a result so that the Entity can
    modify itself on its own terms.
  tags: []

- question: What should a Value Object understand?
  answer: Whenever possible, only its own internal shape and attributes and type
  tags: []

- question: |
    If additional attributes weaken the cohesiveness of an Entity, what should
    be done to improve the design?
  answer: Create value types to be used by the Entity
  tags: []

- question: If a Value Object referenced by an Entity becomes invalid, what should be done?
  answer: It should be replaced with a correct value/object (whole value replacement)
  tags: []

- question: How d you compare two Value Object instances?
  answer: Compare the equality of their attributes using an `equals()` method
  tags: []


- question: |
    How do you compare two Value Object instances?
  answer: Compare the equality of their attributes using an equals method
  tags: []

- question: What is a Side-Effect Free Function?
  answer: |
    An operation of an object that produces output but without modifying its own state.
    They are Query methods in Bertrand Meyer's Command-Query Seperation (CQS) principle.
  tags: []

- question: What describes a Value Object?
  answer: Cohesive Attributes
  tags: []

- question: How do you ensure that a Value Object is immutable?
  answer: Only allow values to be set through the constructor
  tags: []

- question: Where should logic pertaining to a value be located?
  answer: In a Value Object (likely in the constructor or in individual functions thereof)
  tags: []

- question: |
    When objects from an upstream context flow into a downstream context, how do you
    model concepts in the downstream (consuming) context to minimize responsibility
    for properties in the downstream model?
  answer: |
    Use immutable value objects whenever possible so that synchronization need not
    be maintained.
  tags: []

- question: What are the representations of thing, description, and descriptive types of things?
  answer: Entity, value, standard types/power types
  tags: []

- question: How is a Standard Type implemented?
  answer: |
    They can be thought of as Entities but often they are a simple class passed into a
    Value Object, or a Value Object itself, (Java enum factories) that tells the VO what type it is.
  tags: []

- question: What is an example of a Standard Type?
  answer: A phone number with a type such as Home, Mobile, Work, or Other
  tags: []

- question: Where do Standard Types typically reside?
  answer: In a separate context from the models that consume them
  tags: []

- question: |
    What GoF object is represented by a Standard Type implemented
    using an Enum with default methods
  answer: |
    State since default methods are implementedfor the Standard Type and
    overriden for the specific type.
  tags: []

- question: How should tests be written from a DDD perspective?
  answer: Tests should be written so that they have meaning to domain experts
  tags: []

- question: What is another term for modelling a Value Object as a Strategy?
  answer: A Policy
  tags: []

- question: What two constructors are good to support for Value Objects?
  answer: Primary which uses private setters, and a copy constructor
  tags: []

- question: Is it permissible to combine patterns (such as Strategy/Policy) with a Value Object?
  answer: Yes
  tags: []

- question: Should accessors be limited to getting and setting?
  answer: No, it can also perform assertions as guards
  tags: []

- question: What is an easier method for Aggregate persistence?
  answer: NoSQL over ORMs since they persist aggregates quite well
  tags: []

- question: What are signs of undue data model (vs domain model) influence on Value Objects?
  answer: |
    Are you considering an Entity only because the data model must store it as an Entity?
  tags: []

- question: "Describe: 'Data Model should be subordinate'"
  answer: |
    Design your data model for the sake of your domain model,
    not your domain model for the sake of your data model.
  tags: []

- question: |
    What is one method to persist a singular Value Object
    without making it an Entity while dealing with the
    impedance mismatch?
  answer: Denormalize them into the parent Entities' table row
  tags: []


- question: What are ways to persist Value Object collections??
  answer:
    - Textual representation
    - As an Entity only in the data model (use a Layer Supertype to assist)
    - Collection backed by a join table
  tags: []

- question: |
    How do you protect against invariants so that an Entity is not peristed
    which is older than the one currenly peristed?
  answer: Use a version number and reject updates that are older
  tags: []

- question: What are issues with large-cluster Aggregates?
  answer: |
    - False invariants/constraints imposed by the developers
    - Transactional issues
    - Performance and scalability issues
  tags: []
