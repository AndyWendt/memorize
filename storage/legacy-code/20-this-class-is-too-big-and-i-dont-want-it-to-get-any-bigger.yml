---

- question: "What methods to use when you don't want to make a class worse?"
  answer: |
    * Sprout Method
    * Sprout Class

    Prefer sprout class.
  tags: []

- question: What is the main pragmatic point behind the SRP?
  answer: |
    Responsibility should be equated to main purpose.
  tags: []

- question: What are questions to ask to determine the main responsibility of a class?
  answer: |
    * "Why is this method here?"
    * "What is it doing for the class?"

    Legacy Code provides far more opportunities to utilize design skills than green field
  tags: []


- question: What are heuristics for seeing responsibilities?
  answer: |
    1. Group Methods: look for common responsibilities between methods
    2. Hidden methods: they can often hide the responsibilities of another class
      * If making a method bothers you, often it means that it needs to be on another class
    3. Look for decisions (already made not that you are making) that can change: does something seem hard coded?
      * Things happening at different levels of abstraction in the same method
      * Typically, it pays to do extract method before you extract class
    4. Look for internal relationships between instance variables and methods
      * Use feature sketches to display the lumps/interconnections between
      * You'll often see pinch points when doing this
    5. Attempt to describe the primary responsibility of a class in a single sentence
      * Keep adding clauses. What is the one thing that seems more important than others
    6. When other methods fail, do some scratch refactoring
    7. Focus on current work
      * If you're providing a different way of doing something then you might have identified a
        different responsibility that can be extracted out
  tags: []

- question: What are the differences between feature and effect sketches?
  answer: |
    * With feature sketches, the arrows point toward the dependencies
    * With effect skectches, the arrows point toward the things the method effects
  tags: []

- question: What are the two ways that the SRP can be violated?
  answer: |
    At the interface and the implementation level
  tags: []

- question: How do you handle a system of knarly classes?
  answer: |
    You tackle them on an as needed basis.  Doing a binge often results in more bugs and instability.
  tags: []

- question: What is the algorithm for extracting a class without getting it in a test harness?
  answer: |
    1. Identify the responsibility to separate
    2. Move the instance variables that must move to a different part of the current class
    3. Create new methods for the methods that you are moving in the current class
      * prefix with "MOVING" and place near the instance variables
    4. Create methods for parts of methods that will be oving
      * Prefix with "MOVING" and place near the others
    5. Doublecheck for instance variable usage outside of the new methods
    6. Create the new class and move the instance variables and methods.  Instantiate in the old class.
    7. Remove the MOVING prefix
  tags: []

- question: What is the most subtle bug that can be introduced when refactoring without tests?
  answer: |
    Those related to inheritance
  tags: []
