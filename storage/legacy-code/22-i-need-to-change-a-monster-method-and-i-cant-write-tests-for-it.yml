---

- question: How can you avoid the monster method refactoring?
  answer: |
    * Sprout Method(59)
    * Sprout Class (63)
  tags: []

- question: What are the disadvantages of not tackling a monster method?
  answer: |
    * They are quagmires
    * You then have to go back and attempt to understand them
    * It quite often takes more time over the long run than just refactoring the method when
      you're already there.
  tags: []

- question: What are the varieties of monster methods?
  answer: |
    Most of the time, the methods are combinations of the below. d
    * Bulleted: where there is little indentation
    * Snarled: dominated by a single large conditional statement
  tags: []

- question: |
    How should you use automated refactorings in conjunction with manual ones
    when dealing with monster methods that are not tested?
  answer: |
    Either manually refactor or automatically refactor but never both at the same time.
    The automatic refactorings (e.g. extract method) then allow you to add tests around the code
    so that you can manually refactor easier.
  tags: []

- question: What should be the goals of automated refactorings?
  answer: |
    * Separate logic from dependencies
    * Introduce seams that make testing easier
  tags: []

- question: What are possible complications with Extract Method?
  answer: |
    * Forget to pass a variable in
    * Accidently override a method in the same class or base class
    * Parameter and return value issues
    * Conversion errors (types)
  tags: []

- question: What is Introduce Sensing Variable?
  answer: |
    Intoduce Sensing Variable adds a variable to sense conditions (often public on the class)
    in the method that we are refactoring to aid refactoring and testing.

    They are helpful for doing refactoring deep inside of snarled methods.

    While you don't want to add behavior while refactoring, you can add code to assist with refactoring.

    Delete them after your refactoring session.
  tags: []

- question: What is Extract What You Know?
  answer: |
    Extract what you know that you can extract safely without tests and then add tests to cover them.

    Pay attention to the coupling count of the extraction.  Ensure that the extraction has a low coupling
    count.  Instance variables don't count usually.

    When the coupling count is greater than 0, it is often beneficial to use a Sensing Variable.

    This is a good place to start refactoring.
  tags: []

- question: What is Gleaning Dependencies?
  answer: |
    Extract logic for the main behavior that you need to preserve and extract the things that
    tests do not cover.

    Not all behaviors are equal in an application.  Test the critical ones; extract the ones that aren't.
  tags: []

- question: What is Break Out a Method Object?
  answer: |
    It's where you create an object only to do the work of your monster method.
    This allows you to set instance variables and the like to make testing/refactoring easier.
  tags: []

- question: What is Skeletonizing methods?
  answer: |
    It is where you extract the condition and body of a method to separate methods and then all that
    is left is the control structure and delegations to other methods.

    This works well with Snarled methods.
  tags: []

- question: What is Find Sequences?
  answer: |
    It is where you extract the conditional and the body of it to a method. It is particularly
    well suited to methods where you have a sequence of operations that happen one after another.

    This works well with bulleted methods.
  tags: []

- question: What is Extract to the Current Class First?
  answer: |
    It is the strategy to extract to the current class and then possibly extract to a class
    that it depends on.   Extracting first to the current class allows you to analyze the naming
    and intention of the code to see if it coincides with a dependency.

    When the method name coincides with a variable that is an object, you should evaluate moving the method
    to the object that the method name coincides with.
  tags: []

- question: What is Extract Small Pieces?
  answer: |
    It is moving in small steps to refactor a given set of code so that the chances for breaking things
    are lowered.
  tags: []

- question: What is Be Prepared to Redo Extractions?
  answer: |
    It is undoing refactorings that you've done since you've learned more about the code
    and identified ways that it could be done better.

    Be willing to throw away changes.  You have VCS for a reason.
  tags: []
