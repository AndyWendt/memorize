---

- question: What is adapt parameter?
  answer: |
    Use it when you can't Extract Interface or when a parameter is difficult to fake.

    You find this when the parameter type is low level or specific to some implementation tech.
    If an interface is already type hinted as the parameter type, you can't have an interface of an interface.

    Don't depend on concretions.

    Basically, wrap the parameter that is coming in to break the dependency.  However, you don't preserve signatures.

    Could you preserve signatures to make it safer just to get it under test?

    Mainly a problem for languages that don't emrace duck typing?
  tags: []


- question: What is Break Out Method Object?
  answer: |
    Don't use this if your method is small and doesn't use instance variables.

    Use preserve signatures.

    Use this if the method is large, it uses instance variables and methods and it is difficult to get the entire
    class in a harness.

    Make getters/setters on the initial class so that the broken out object can use them if need be.

    You can also pass a data holding class to the new method object.
  tags: []

- question: What is Definition Completion?
  answer: |
    Is a way to override concretions for test.   They methods are defined in header files (virtual) but we provide the
    concretion in the test class.

    This sounds like stubs?

    Good to break initial dependencies but can have issues when the language uses header files and confuses debuggers.

    The duplicate definitions should be removed as soon as possible.
  tags: []

- question: What is Encapsulate Global References?
  answer: |
    When globals are used or modified near each other, they belong in the same class.

    Utilize leaning on the constructor.

    Additional followups are Introduce Static Setter, Parameterize Constructor, or Parameterize Method.

    You can use Link Substitution however it often leads to worse code structure.

    You can also use Parameterize Method and Extract and Override Getter.  However, uses across multiple methods/classes
    is dirtier than EGR.
  tags: []

- question: What is Expose Static Method?
  answer: |
    If a method doesn't rely on anything in the class but provides a function that may need to move to another, say to
    a parameter that is passed in, then it can be made static so that it can be brought under test and eventually moved.

    Preserve signatures while doing this.

    The static area of a class really isn't apart of that class.

    They can be used as a staging area for things that don't quite belong to the class.
  tags: []

- question: What is Extract and Override Call?
  answer: |
    You have a dependency to a static method/class in a method, you can extract the method call to a protected method locally
    so that you can override it in a testing subclass.

    Useful for breaking deps on global variables and static methods.
  tags: []

- question: What is Extract and Override Factory Method?
  answer: |
    Basically if problematic object construction is happening in the constructor, it is troublesome for testing purposes.
    You can add a protected method and override that in a testing subclass.
  tags: []

- question: What is Extract and Override Getter?
  answer: |
    This is useful in languages where Extract and Override Factory Method doesn't work as well.  Basically you create
    setters so that you can change instances of created classes for testing purposes. Use a Lazy Getter. Memoization.  Used in singleton design pattern.

    One downside is that someone might use the variable before it is initialized.

    This is better than Extract and Override Call when there are multiple problematic methods.
  tags: []

- question: What is Extract Implementer?
  answer: |
    When the name of a class is perfect for the name of an interface, extract the implementer to create the needed
    separation.  Subclassing the current class and pushing all of its concrete methods down into the subclass.

    Don't use I for interfaces.
  tags: []

- question: What is Extract Interface?
  answer: |
    It is where you create an interface for a class and utilize it whereever that class was used.

    You don't have to extract all of the public methods.
  tags: []

- question: How should you name interfaces?
  answer: |
    Your code shouldn't care if it is dealing with an interface. Start with basic class names and incrementally
    add functionality so that other classes can be broken out later. You can then change the basic class to an interface
    at a later date.

    Think hard about naming when you don't have automated refactoring capabilities.

    Hold off until you get test coverage before you make a pervasive change.
  tags: []

- question: What is Introduce Instance Delegator?
  answer: |
    What: Introduce Instance Delegator is where you delegate from an instance method to a class method.  This means that
      you will likely need to pass an instance into the method or class that uses it.
    Why: This is helpful whenever you are calling a static method that is difficult to depend on in a test.  Ideally,
      the methods should be instance methods on their respective objects.  Such as `sin()` on `1` instead of a Math
      utility class with the static method `sin()`.  This allows you to add an object seam.

    Ultimately, you might be able to remove the static methods and just use the instance methods.
  tags: []

- question: Describe Introduce Static Setter
  answer: |
    WHAT: ISS is where you start with a protected constructor, subclass the class and add a static method to set the
      instance.

    WHY: ISS allows you to set the instance of a Singleton in test.
  tags: []

- question: What is an alternative to a Singleton?
  answer: |
    Use inheritance and use a parameter.
  tags: []

- question: What is Link Substitution?
  answer: |
    WHAT: Use global sensing variables and dummy libraries that have functions with the same signatures (fakes)
    WHY: it is a tactic useful for procedural languages to substitue one method for another at compile time
  tags: []

- question: What is Parameterize Constructor?
  answer: |
    WHAT: Instead of creating classes directly, pass them in as a paramter.
    WHY: It allows you to extract instance creation out of a constructor.

    You can use method arity to define multiple constructors thus preserving existing functionality.
    You can also add default parameters.

    This does increase depedencies across the system on the passed in class but that's a relatively minor
    concern that can be handled by other refactorings.
  tags: []

- question: What is Parameterize Method?
  answer: |
    It is essentially the same thing with Parameterize Constructor.

    WHAT: Instead of creating classes directly, pass them in as a paramter.
    WHY: It allows you to extract instance creation out of a Method.
  tags: []
