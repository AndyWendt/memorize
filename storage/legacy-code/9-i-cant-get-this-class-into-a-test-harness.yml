---

- question: What are the most common issues with attempting to get a class into a test harness?
  answer: |
    1. Objects of the class can't be created easily
    2. The test harness won't easily build with the class in it
    3. The constructor we need to use has bad side effects
    4. Significant work happens in the constructor, and we need to sense it
  tags: []

- question: What is the best way to figure out if you can get a class into a test harness?
  answer: |
    Just do it.  Write a test case and attempt to create an object of the class.
  tags: []

- question: What is the case of an irritating parameter?
  answer: |
    It is where you have a parameter that is passed to the constructor of a class
    that makes the class difficult to test
  tags: []

- question: How do you handle an Irritating Parameter?
  answer: |
    Use fakes, mocks, stubs, or even passing null.  You might need to extract an interface.

    Pass Null and Extract Interface are two strategies for this.

    Another two are Subclass and Override Method (need to be careful of changing behavior).
  tags: []

- question: When should you not pass null?
  answer: |
    Never in production unless you can't avoid it.  Use the Null Object Pattern instead.
    Null objects are quite useful when a client doesn't care whether or not an operation
    was successful.
  tags: []

- question: Is it ok to violate rules for fakes/test code?
  answer: |
    Absolutely.  When test code isn't going on production then you can break encapsulation.

    However, the code should be clean, deduplicated (as much as is reasonable), and easy to change.
  tags: []

- question: What is the case of the hidden dependency?
  answer: |
    It is where the constructor makes a call to a resource that can't easily be accessed in a
    test harness.
  tags: []

- question: What are strategies to handle hidden dependency?
  answer: |
    * Parameterize Constructor (Primary one)
    * Extract Interface can also help for the parameters passed in
    * Extract and Override Getter
    * Extract and Override Factory Method
    * Supersede Instance Variable
  tags: []

- question: What is one algorithm to handle a hidden dependency safely?
  answer: |
    * create a new method that is in effect a secondary constructor
    * use that method in tests
    * Preserve the original constructor for clients
  tags: []

- question: What is a Construction Blob?
  answer: |
    It is where a large number of objects generated or a small number of objects are used to create a
    multitude of other objects.
  tags: []

- question: What are good refactorings for Construction Blob?
  answer: |
    * Override Factory Method can help but it can be dangerous even though it's the default here
    * Supersede Instance Variable is useful but one must be careful with memory issues
  tags: []

- question: How can you handle a case of the Irritating Global Dependency?
  answer: |
    In a simple case you can use the following refactorings:

    * Parameterize Constructor
    * Parameterize Method
    * Extract and Override Call
  tags: []

- question: Why are global variables a bad thing?
  answer: |
    Because when they are used inside of a class then you don't know if or what that class is going to modify
    just by looking at the public methods.  The class will have side-effects and makes it much more difficult
    to understand programs.
  tags: []

- question: What is a way to enable singletons to be tested?
  answer: |
    Add a method `resetForTesting`:

    ```
    public void resetForTesting() {
      instance = null;
    }
    ```

    Introduce Static Setter is better when the singleton doesn't expose public methods or it
    uses external resources that modify its state.

    Also Sublclass and Override Method can make testing easier when the singleton is doing things that
    we don't want it to do in a test harness (such as talking to the db).   Basically it entails
    subclassing the singleton and create a public method called `setTestingInstance` on the base class that
    you can use to set the subclass.

    To get past the global deps, use parameterize constructor and parameterize method.
  tags: []


- question: How do you deal with an onion parameter so that you can test it?
  answer: |
    Use:

    * Extract Interface
    * Extract Implementer
    * Pass Null

    Side note: A DI container is also a good strategy

    Also, this doesn't matter in a duck typing scenario
  tags: []

- question: How do you handle the case of an Aliased Parameter?
  answer: |
    An aliased Parameter is where you have an inheritance hierarchy and it would be difficult to
    Extract an Interface.  Alternatives are Subclassing and Overriding method.
  tags: []
