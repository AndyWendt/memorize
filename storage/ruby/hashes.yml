---

- question: "When code depends on a hash value being present, nested or not, how should you retrieve the value and WHY?"
  answer: |
    A regular hash call without a key present returns `nil`.  A chained call will return
      `NoMethodError (undefined method [] for nil:NilClass)`.  Unfortunately, it fails far away from where
      the values are added to the hash.
    Using `Hash#fetch()` raises a `key not found error`  Raises the error right where the information is supplied.

    You can also chain `fetch()` calls though it will raise a  `key not found` error.  But at least the error is raised
    in the location where it is needed.

    When code depends on a hash value being present, use `fetch()` instead of the subscript operator.
  tags: ["008-fetch-as-an-assertion"]

- question: How do you provide a default value for a hash key?
  answer: |
    Use `Hash#fetch()` by providing it a block: `Hash.fetch(:my_key) { 'my default value' }`
  tags: []

- question: How do you raise a custom exception if a hash key is not present?
  answer: |
    Use `Hash#fetch()` by providing it a block: `Hash.fetch(:my_key) { raise Error.new }`
  tags: []

- question: Why should you not use `||` to attempt to retrieve hash values with a default?
  answer: |
    Don't use `||` to provide a default value when attempting to retrieve a hash key. If the key
    exists and it is falsey then it will return the right side.

    ```
    {}[:foo] || :default             # => :default
    {foo: nil}[:foo] || :default     # => :default
    {foo: false}[:foo] || :default   # => :default
    ```

    `Hash.fetch()` only resorts to the default when the given key is missing so it is a much better
    way to retrieve values.

    ```
    options = {logger: false}
    logger = options.fetch(:logger){Logger.new($stdout)}
    ```
  tags: []
