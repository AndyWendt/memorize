---

- question: "When should you interface?"
  answer: "Foo bar"
  tags: [interfaces]

- question: "Describe what an object is"
  tags: [fizz, baz]
  answer: "Fizz bazzy bizzy"

- question: "Where should business rule objects live? "
  tags: []
  answer: "Where should business rule objects live?"


- question: "Should objects be modeled based off of data or behavior? "
  tags: []
  answer: "Behavior"

- question: "When you see a repeated concept, such as `couponCode`, what does that indicate?"
  answer: "You have another abstraction (i.e. Coupon)"
  tags: []

- question: What is a good pattern to remove uncertainty in code and state intent better?
  answer: The Null Object or Special Case Pattern
  tags: []

- question: |
    Why do some operators, such as `+`, not return the same Subclass (i.e. a sub class of array)?
  answer: |
    Because some of them are written in C and not in Ruby, they have hard coded return types.
  tags: ['018-subclassing-array']

- question: How do you get a class to behave like a core ruby class?
  answer: |
    Use delegation instead of inheritance.
    Use delegation, an internal array, override the appropriate methods,
    and import enumerable or use def delegator.
  tags: ['018-subclassing-array']

- question: What are objects?
  answer: |
    They are recursive building blocks that encapsulate state and behavior and communicate
    through the use of messages
  tags: ["357-object-oriented-programming"]



