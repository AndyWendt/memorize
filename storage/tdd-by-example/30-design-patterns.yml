---

- question: How does TDD change the desing process in relation to design patterns?
  answer: |
    Design should not be considered a phase.  It should be considered a process with refactoring at its core.
  tags: []

- question: Describe the Command pattern
  answer: |
    The command pattern allows you to take a complex method call (or message send) and encapsulate it in
    an object with a common interface (the run method)
  tags: []

- question: Describe a value object
  answer: |
    It is an immutable object that doesn't have an identity.  Every operation returns a new object.
  tags: []

- question: Describe the Null Object Pattern
  answer: |
    Essentially you represent a special case, null, with an object.  It has the same interface as the class
    that you are creating a null object for.  There are tradeoffs for this, however.
  tags: []

- question: Describe template method
  answer: |
    It allows for the representation of invariants while allowing for future refinement through the use of
    inheritance and abstract methods.

    It is a method that only calls methods (a template).

    Best found through experience.
  tags: []

- question: Describe a pluggable object
  answer: |
    Reduce the duplication of repeated conditionals through the use of a pluggable object.
  tags: []

- question: Describe Pluggable Selector Pattern
  answer: |
    Use reflection or meta programming to invoke a method rather than a concrete switch statement
    since they get repetative.

    Use it when there was inheritance with multiple claseses who each only had one method.
  tags: []

- question: Describe Factory Method
  answer: |
    It is a method that creates an object. The downside of it is that there's indirection.  The updside,
    easy of use.
  tags: []

- question: Describe the Imposter pattern
  answer: |
    You mirror the API of the current implementation and change the implemenation to match your new desired
    computation.  That allows you to easily swap it in.  Quack, quack... Duck typing.
  tags: []

- question: Describe the composite pattner
  answer: |
    Rather than have transaction, account, allaccounts... you can just treat the transaction and account
    as essentially the same thing and roll them up.

    Basically it is an object that is the composition of the behavior of a list of other objects.
  tags: []

- question: Describe the collecting parameter
  answer: |
    If you want to collect the results of an operation that is spread over multiple objects, pass a object parameter to a
    method to collect the results.
  tags: []

- question: Describe the singleton pattern
  answer: |
    Don't
  tags: []
